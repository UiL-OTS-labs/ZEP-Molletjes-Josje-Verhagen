/******************************************************************************\
FILE:           text_picture_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object for displaying short a welcome message in a 
big font.


HISTORY:
2010-11-16 TV   Created as part of the standard Zep modules.

\******************************************************************************/
import std_sound_output_device;

Page score_page
{
    bool        checkkeys;      // if set, continue keys enabled

    init()
    {
        fill_pattern_color = color:lightgray;
    }

    on_event:key_press()
    {
        if (target != null && checkkeys && 
                (input_key == KEY_Return))
            done(CONTINUE);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    on_event:message()
    {
        // Handle 'continue' message received from control page.
        if (message_arg == CONTINUE)
            done(CONTINUE);
    }

	void load_background(string fn)
	{
		layout.canvas.image.load(fn);
	}
	
	StackLayout layout
	{
		CanvasGadget canvas
		{
			on_event:resize()
			{
				offset_x = round(actual_width / 2);
				offset_y = round(actual_height / 2);
			}
			
			RectangleShape square
			{
				void load()
				{
					fill_pattern_color = color:white;
					width = image.width;
					height = image.height;
					x = -round(width / 2);
					y = -round(height / 2);
					is_visible = true;
				}
			}
			
			ImageShape image
			{
				void load(string fn)
				{
					image = fn;
					height = round(test_window1.height);
					width  = round(image_width * (height/image_height));
					x = -round(actual_width / 2);
					y = -round(actual_height / 2);
					
					is_visible = true;
					
					square.load();
				}
			}
			
			 TextShape message
			{
				init()
				{
					offset_x = -400;
					offset_y = -400;
					font_family = ENTRY_PAGE_MESSAGE_FONT_FAMILY;
					font_size = 80;
					line_pattern_color = color:black;
					is_visible = true;
				}
			}
			
			 TextShape text_message
			{
				init()
				{
					text = SCORE_TEXT;
					offset_x = -600 - (string_width(text,true)/2);
					offset_y = -400 - (message.string_height(text,true)/2);
					font_family = ENTRY_PAGE_MESSAGE_FONT_FAMILY;
					font_size = 40;
					line_pattern_color = color:black;
					is_visible = true;
				}
			}
			
			TextShape text_message2
			{
				init()
				{
					text = SCORE_TEXT2;
					offset_x = 400;
					offset_y = -400 + (message.string_height(text,true)/2);
					font_family = ENTRY_PAGE_MESSAGE_FONT_FAMILY;
					font_size = 40;
					line_pattern_color = color:black;
					is_visible = true;
				}
			}
			
			
		}
    }
	
	SoundChain soundchain
	{
		SoundFile clip {}

		SoundPlayback playback {}
		
		void play(time t) //returns an array with 
			{
				abort(); //abort any playing sounds in the specific soundchain;
				
				playback.device = sound_output_device;
				
				clip.file = stimuli_dir() + "sounds/" + REWARD_AUDIO_FILENAME;
				start(t);
			}
	
	}
		
    Timer timer
    {
        on_event:expire()
        {
            done(TIMEOUT);
        }
    }


    void done(int msgid)
    {
        timer.abort();

        checkkeys = false;

        signal_target(msgid);   // Tell caller we're done.
        target = null;
		soundchain.abort();
		
        if (control.target == this)
        {
            control.disable_keys();
            control.target = null;
        }
    }


    //==========================================================================


    void set_text(string txt, bool markup=false)
    {
		layout.canvas.message.text = txt, markup;
		layout.canvas.message.offset_x = layout.canvas.message.offset_x - layout.canvas.message.string_width(txt, markup);
    }


    void action_auto(dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(null, timeout, showdelay, fadedur, false);
    }


    void action_auto(Object caller, dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s)
    {
        action(caller, timeout, showdelay, fadedur, false);
    }
		
    void action(Object caller, dur timeout=0s, 
        dur showdelay=-1s, dur fadedur=-1s, bool kbd=true, int score = 0, int block_nr = 1, bool final_block = false)
    {
        hide_cursor();
        
        timer.abort();
        if(final_block)
		{
			load_background(stimuli_dir() + "images/" + "block_" + block_nr +"/" + FINAL_BLOCK_IMAGE_FILENAME);
			layout.canvas.message.is_visible = false;
			layout.canvas.text_message.is_visible = false;
			layout.canvas.text_message2.is_visible = false;
			timeout = 5s;
		}
		else
		{
			set_text(string(score));
			load_background(stimuli_dir() + "images/" + "block_" + block_nr +"/" + score + ".svg");
		}
        
        score = max(score, 0); score = min(score, 24);
		
        // Force page show delay and transition duration in sane range.
        if (showdelay < 0s) showdelay = PAGE_TRANSITION_DELAY;
        else showdelay = limit(showdelay, 0s, MAX_PAGE_TRANSITION_DELAY);
        if (fadedur < 0s) fadedur = PAGE_TRANSITION_DURATION;
        else fadedur = limit(fadedur, 0s, MAX_PAGE_TRANSITION_DURATION);

    	// Clear page transition delay.
    	page_transition_delay = 0s;

	// Let's delay the first test page trial following this page.
	first_trial_delay = FIRST_TRIAL_EXTRA_DELAY;
		
		//play teh sound
		soundchain.play(now()+showdelay);
		
        if (test_window1.show_page(this, now() + showdelay, fadedur) == 0)
        {
            // Page not yet shown. Extend timeout period (if applicable) 
            // until page is fully visible (fade-in has finished).
            if (timeout > 0s) 
                timeout += expected_transition_finish_time - now();
        }

        if (caller != null)
        {
            checkkeys = kbd && !test_window1.is_output_only();
            if (timeout > 0s) timer.start(now() + timeout);

            target = caller;
            control.target = this;
            control.disable_keys();
            control.enable_key(KEY_Return, CONTINUE);
            control.enable_key(' ', CONTINUE);
//          control.enable_key(KEY_Escape, CONTINUE);

            if (checkkeys)
                test_window1.activate();
            else if (test_window1.is_output_only())
                ctrl_window.activate();
        }
        else
        {
            checkkeys = false;
            target = null;
        }
    }

    void stop_action()
    {
        timer.abort();

        checkkeys = false;

        target = null;

        if (control.target == this)
        {
            control.disable_keys();
            control.target = null;
        }
    }
}
